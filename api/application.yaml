name: Application

class: Marionette.Application

description: |
  Applications are the entry point into most Marionette Applications.
  For all but the simplest of webapps you'll want to instantiate a new Application to act as the hub for the rest of your code.

  Applications provide a place to put start up code for your app through its start events.


  ```js
  var MyApp = new Marionette.Application();
  ```

constructor:
  description: |
    Creates a new Application.

    The constructor function calls initialize if it exists, and sets the properties of the Application.

    @param {...*} options - Options can take any key/value pair and are passed to the initialize function.

  examples:

functions:
  initialize:
    description: |
      If `initialize` is set in the Application class, it will be called when the application is instantiated.

      @param {Object} options - The constructor's options

    examples:
      -
        name: Basic Use
        example: |
          The `initialize` function is a good place to put custom, post instantiation class logic.

          ```js
          var MyApp = Marionette.Application.extend({
            initialize: function(options) {
              console.log(options.container);
            }
          });

          var myApp = new MyApp({container: '#app'});
          ```

  start:
    description: |
      Start the Application, triggering the Initializers array of callbacks.

      @param {...*} options - Options to pass to the `start` triggerMethods and the Initializers functions.
      @api public

    examples:
      -
        name: Starting an Application
        example: |
          Once you have your application configured, you can kick everything off by
          calling: `MyApp.start(options)`.

          This function takes a single optional parameter. This parameter will be passed
          to each of your initializer functions, as well as the initialize events. This
          allows you to provide extra configuration for various parts of your app throughout the
          initialization sequence.

          ```js
          var options = {
            something: "some value",
            another: "#some-selector"
          };

          MyApp.start(options);
          ```
